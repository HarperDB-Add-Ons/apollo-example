
type Dog @table(database: "demo")  @export {
    id: Int! @primaryKey
    name: String @indexed
    breedName: String! @indexed
    breed: Breed @relationship(from: breedName)
    dob: Date @indexed
}

type Breed @table(database: "demo", expiration: 3600) @export {
    name: ID @primaryKey
    image_link: String
    good_with_children: Int
    good_with_other_dogs: Int
    shedding: Int
    grooming: Int
    drooling: Int
    coat_length: Int
    good_with_strangers: Int
    playfulness: Int
    protectiveness: Int
    trainability: Int
    energy: Int @indexed
    barking: Int @indexed
    min_life_expectancy: Int
    max_life_expectancy: Int @indexed
    max_height_male: Int
    max_height_female: Int
    max_weight_male: Int
    max_weight_female: Int
    min_height_male: Int
    min_height_female: Int
    min_weight_male: Int
    min_weight_female: Int
    dogs: [Dog] @relationship(to: breedName)
}

input DogInput  {
    id: Int
    name: String
    breedName: String
    breed: BreedInput
    dob: Date
}

#The input fields here are a small subset of the Breed type in this example they match the indexed fields
input BreedInput {
    name: ID
    energy: Int
    barking: Int
    max_life_expectancy: Int
    dogs: [DogInput]
}



type Query {
    #dogs query demonstrates how to use a custom input type to query
    dogs(dog: DogInput): [Dog]
    dog(id: Int!): Dog
    dogsByBreedName(breedName: String!): [Dog]
    breeds(breed: BreedInput): [Breed]
    breed(name: String!): Breed
}

type Mutation {
    putDog(id: Int!, name: String, breedName: String!, dob: Date): Dog
    deleteDog(id: Int!): Dog
}